

# define the rootLogger
#解释： 左边是rootLogger ， 右边是与这个Logger相关联的AppenderName，以及这个Appender打印的消息级别
#log4j.rootLogger= [level] , Appender#1 , Appender#2, Appender#3...
log4j.rootLogger=INFO,console
#define the appender
log4j.appender.console=org.apache.log4j.ConsoleAppender
#define appender layout
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#define appender output format
#%p 输出优先级 DEBUG INFO WARNING信息  %d  输出日期 也可以在之后指定格式%d{yyyy-MM-dd HH:mm:ss,sss}
#%m 输出代码中指定的消息   %M 输出打印该条日志的方法名   %l 该日志发生的位置，即在代码中的行数
#%c 输出所属类目，通常就是所在类的全名(是所在Logger的类名)   %n输出一个换行符
#[QT] 是log信息的开头，可以为任意字符，一般为项目简称    %t 输出该日志事件的线程名称
log4j.appender.console.layout.conversionPattern= %p %d %c %t %m %n


#非根Appender
#log4j.logger.[logger-name] = [level] , Appender#1 , Appender#2 , Appender#3...
#非根Appender除了要将信息打印到控制台外，还要写到文件里面

#不能这样写文件的路径：file =~/hyena.log
file = /home/hyena/hyena.log


#左边log4j.logger.[logger-name] 在log4j的框架中就生成了一个Logger ，名字为Hello
#这个logger与名字为save的Appender相关联，这个Appender的处理INFO等级的信息
log4j.logger.Hello = INFO , save
log4j.appender.save = org.apache.log4j.FileAppender
log4j.appender.save.file = ${file}

log4j.appender.save.layout = org.apache.log4j.PatternLayout
log4j.appender.save.layout.conversionPattern = [Hello World] %p %d %c %t %m %n





